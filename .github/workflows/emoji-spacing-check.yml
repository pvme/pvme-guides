name: Check Emoji Spacing

on:
  pull_request:

jobs:
  check-spacing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan all files for improperly spaced emojis
        id: grep
        run: |
          echo "Scanning all files for bad emoji spacing..."

          all_files=$(find . -type f \( -name "*.md" -o -name "*.txt" -o -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.html" -o -name "*.rb" -o -name "*.go" -o -name "*.c" -o -name "*.cpp" \))

          bad_json="[]"
          for file in $all_files; do
            clean_file="${file#./}"
            if grep -nP '(?<=[^\s\p{P}])<:.*?:.*?>|<:.*?:.*?>(?=[^\s\p{P}])' "$file" > /dev/null; then
              matches=$(grep -nP '(?<=[^\s\p{P}])<:.*?:.*?>|<:.*?:.*?>(?=[^\s\p{P}])' "$file" || true)
              while IFS= read -r line; do
                lineno="${line%%:*}"
                content="${line#*:}"
                bad_json=$(jq -c --arg file "$clean_file" --arg lineno "$lineno" --arg content "$content" '. += [{file: $file, lineno: $lineno, content: $content}]' <<< "$bad_json")
              done <<< "$matches"
            fi
          done

          echo "$bad_json" > results.json

          if [[ "$bad_json" != "[]" ]]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Post comments for each batch
        if: steps.grep.outputs.found == 'true'
        run: |
          batch_size=50
          total=$(jq length results.json)
          batches=$(( (total + batch_size - 1) / batch_size ))

          for ((i = 0; i < batches; i++)); do
            batch=$(jq ".[$((i * batch_size)):$(((i + 1) * batch_size))]" results.json)
            echo "## ❌ Style Guide issue: Emoji Spacing" > comment.txt
            echo >> comment.txt
            echo "Emojis like \\`<:emoji:123>\\` must have a space before and after them." >> comment.txt
            echo >> comment.txt
            jq -r 'group_by(.file)[] | "**In [`" + .[0].file + "`](https://github.com/${{ github.repository }}/blame/${{ github.head_ref || github.ref_name }}/" + .[0].file + "):`\n" + (map("* Line " + .lineno + ": `" + .content + "`") | join("\n")) + "\n"' <<< "$batch" >> comment.txt

            gh api \
              --method POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
              -f body="$(cat comment.txt)"
          done

      - name: Fail the job if issues found
        if: steps.grep.outputs.found == 'true'
        run: exit 1
