name: Check Emoji Spacing

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-spacing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Install GitHub CLI + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Scan files for emoji spacing violations
        id: grep
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔎 Scanning files for bad emoji spacing…"
          branch_name="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"
          bad=""

          dev_mode="false"   # Toggle true → full-branch scan; false → PR-changed files only
          echo "Dev mode: $dev_mode"

          if [ "$dev_mode" = true ]; then
            echo "🚧 Dev mode ON — scanning entire branch"
            mapfile -t files < <(git ls-tree -r --name-only HEAD)
          else
            echo "✅ Standard mode — scanning PR-changed files"
            pr_number="${{ github.event.pull_request.number }}"
            mapfile -t files < <(gh pr view "$pr_number" --json files -q '.files[].path')
          fi

          for file in "${files[@]}"; do
            echo "📂 Checking: $file"
            # ————————————————————————————————————————————
            # Match <:emoji:123…> only when it is NOT:
            #  • preceded by whitespace OR [r s _ " ' ( [ { - *]
            #  • followed by whitespace OR [ , . ! ? ; : ) ] } " ' - *]
            # ————————————————————————————————————————————
            matches=$(perl -nle '
              while (/(?<![\srs_"'"'"'\(\[\{\-\*])(<:[^:]+:\d+>)(?![\s,\.!?;:\)\]\}\_"'"'"'\-\*])/g) {
                print "$.:$1";
              }
            ' "$file" || true)

            [ -z "$matches" ] && echo "✅ No issues in $file" && continue

            file_block=""
            while IFS= read -r line; do
              lineno="${line%%:*}"
              match="${line#*:}"

              # extract & escape emoji token
              emoji="$match"
              escaped_emoji=$(printf '%s' "$emoji" | sed -e 's/[][(){}.^$*+?|\\]/\\&/g')

              # the rest of your filters stay exactly the same…
              # ✅ skip if preceded by a real zero-width space
              echo "$match" | perl -ne "exit 0 if /\x{200B}$emoji/; exit 1" && continue

              # ✅ skip if inside backticks
              full_line=$(sed "${lineno}q;d" "$file")
              export EMOJI="$emoji"
              echo "$full_line" | perl -CS -e '
                my $e = $ENV{"EMOJI"};
                while (m/`([^`]*)`/g) {
                  exit 0 if index($1, $e) != -1;
                }
                exit 1;
              ' && continue

              # ✅ skip if followed by allowed trailing chars
              echo "$match" | perl -ne "exit 0 if /^$escaped_emoji[.,!?;:\\\\)\\]{}_\"'\\-*]/; exit 1" && continue

              # 🚫 Otherwise mark violation
              file_block+=$'\n'"* Line ${lineno}: \`${emoji}\`"
            done <<< "$matches"

            if [ -n "$file_block" ]; then
              file_url="https://github.com/${{ github.repository }}/blob/$branch_name/$file"
              bad+=$'\n'"**In [\`$file\`]($file_url):**"$'\n'"$file_block"
            fi
          done

          if [ -n "$bad" ]; then
            {
              echo "## ❌ Style Guide issue: Emoji Spacing"
              echo
              echo "Emojis must have a space before and after them unless surrounded by: \`r\`, \`s\`, \`_\`, punctuation, quotes, brackets, dashes, asterisks, backslashes, or a zero-width space."
              echo
              echo "_Tip: Cmd/Ctrl+Click file links to open them in a new tab._"
              echo
              echo "### __Offending Lines__"
              echo "$bad"
            } > emoji-comment.txt
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on PR if issues found
        if: steps.grep.outputs.found == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: emoji-comment.txt

      - name: Fail the job if issues found
        if: steps.grep.outputs.found == 'true'
        run: exit 1
