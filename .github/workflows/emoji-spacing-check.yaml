name: Check Emoji Spacing

on:
  workflow_dispatch:
    inputs:
      dev:
        description: 'Enable dev mode (scan all files)'
        required: false
        default: 'false'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-spacing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }}

      - name: Scan files for emoji spacing violations
        id: grep
        shell: bash
        run: |
          branch_name="${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}"
          echo "Scanning files for bad emoji spacing..."

          bad=""

          # Toggle for full-repo scan
          dev_mode="${{ github.event.inputs.dev == 'true' }}"
          if [ "$dev_mode" = true ]; then
            echo "üöß Dev mode ON ‚Äî scanning entire repo..."
            files=$(git ls-files -z)
          else
            echo "‚úÖ Standard mode ‚Äî scanning all PR-changed files..."
            git fetch origin ${{ github.base_ref }}
            merge_base=$(git merge-base FETCH_HEAD HEAD)
            files=$(git diff --diff-filter=AM --name-only "$merge_base"...HEAD -z)
          fi

          while IFS= read -r -d '' file; do
            clean_file="${file#./}"
            echo "üîç Checking file: $clean_file"

            regex="[^[:space:]]<:.*?:[0-9]+>|<:.*?:[0-9]+>[^[:space:]]"
            export LC_ALL=C.UTF-8
            matches=$(grep -nPo "$regex" "$file" || true)

            echo "MATCHES FOUND:"
            echo "$matches"

            if [ -z "$matches" ]; then
              echo "‚ö†Ô∏è  No matches found in: $file"
              continue
            fi

            file_block=""

            while IFS= read -r line; do
              lineno="${line%%:*}"
              match="${line#*:}"
              [ -z "$match" ] && continue

              echo "üîé Checking match on line $lineno: $match"

              emoji=$(echo "$match" | grep -oP "<:.*?:\d+>")
              [ -z "$emoji" ] && continue
              escaped_emoji=$(printf '%s' "$emoji" | sed -e 's/[][(){}.^$*+?|\\]/\\&/g')

              echo "$match" | perl -ne "exit 0 if /[rs_\"'\\(\\[{\-*]$escaped_emoji/; exit 1" && continue
              echo "$match" | perl -ne "exit 0 if /\x{200B}$emoji/; exit 1" && continue
              full_line=$(sed "${lineno}q;d" "$file")
              echo "$full_line" | grep -Pq '\`[^`]*<:.*?:\d+>[^`]*\`' && continue
              echo "$match" | perl -ne "exit 0 if /^$escaped_emoji[.,!?;:\\\\)\\]{}_\"'\\-*]/; exit 1" && continue

              escaped_match=$(printf "%s" "$match" | sed 's/`/\\`/g')
              echo "‚ö†Ô∏è  Adding to file_block: $escaped_match"
              file_block="${file_block}"$'\n'"* Line ${lineno}: \`${escaped_match}\`"
            done <<< "$matches"

            echo "üìÑ Current file_block:"
            echo "$file_block"

            if echo "$file_block" | grep -q '[^[:space:]]'; then
              echo "üìÑ Adding file_block to bad"
              file_url="https://github.com/${{ github.repository }}/blob/$branch_name/$clean_file"
              bad="${bad}"$'\n'"**In [\`$clean_file\`]($file_url):**"$'\n'"$file_block"
              echo "‚úÖ Updated bad block content:"
              echo "$bad"
            else
              echo "üö´ file_block had no valid content"
            fi
          done <<< "$files"

          echo "üí° Final bad block content:"
          echo "$bad"

          if grep -q '[^[:space:]]' <<< "$bad"; then
            {
              echo "## ‚ùå Style Guide issue: Emoji Spacing"
              echo
              echo "Emojis must have a space before and after them unless surrounded by: \`r\`, \`s\`, \`_\`, punctuation, quotes, brackets, dashes, asterisks, backslashes, or a zero-width space."
              echo
              echo "_Tip: Cmd/Ctrl+Click file links to open them in a new tab._"
              echo
              echo "### __Offending Lines__"
              echo "$bad"
            } > emoji-comment.txt
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on PR if issues found
        if: steps.grep.outputs.found == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: emoji-comment.txt

      - name: Fail the job if issues found
        if: steps.grep.outputs.found == 'true'
        run: exit 1
